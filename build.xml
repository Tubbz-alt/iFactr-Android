<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Run">
    <PropertyGroup>
        <Framework>./iFactr.Droid</Framework>
    </PropertyGroup>

    <Target Name="Run">
        <CallTarget Targets="Compile" />
        <CallTarget Targets="Verify" Condition="$(SignAssembly) == true"/>
        <CallTarget Targets="Package" />
    </Target>

    <Target Name="SubtreeUpdate">
        <Exec Command="git subtree pull --prefix=iFactr.UI https://github.com/Zebra/iFactr-UI.git NetStandard --squash"/>
    </Target>

    <Target Name="Clean">
        <ItemGroup>
            <iFactrClean Include="$(Framework)/bin/**" />
            <iFactrClean Include="$(Framework)/obj/**" />
        </ItemGroup>
        <Delete Files="@(iFactrClean)" />
    </Target>

    <Target Name="Compile" DependsOnTargets="Clean">
        <MSBuild Projects="$(Framework)/iFactr.Droid.csproj" />
    </Target>

    <Target Name="Verify">
        <ItemGroup>
            <iFactrVerify Include="Distribution/iFactr.Droid.dll" />
        </ItemGroup>
        <Exec Command='"$(SDK40ToolsPath)sn" -q -v %(iFactrVerify.Identity)' ContinueOnError="true" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" ItemName="Verify" />
        </Exec>
        <Error Text="%(Verify.Identity)" Condition="'@(Verify)' != ''" />
    </Target>

    <Target Name="Package">
      <XmlRead XPath="//dependency/@id" XmlFileName="$(Framework)/iFactr.Droid.nuspec">
        <Output TaskParameter="Value" PropertyName="_Deps" />
      </XmlRead>
      <XmlRead XPath="//dependency/@version" XmlFileName="$(Framework)/iFactr.Droid.nuspec">
        <Output TaskParameter="Value" ItemName="Formats" />
      </XmlRead>
      <ItemGroup>
        <_DepPaths Include="$(_Deps.Split(';'))"/>
        <DepPaths Include="iFactr.UI/MonoCross/Distribution/%(_DepPaths.Identity).dll"/>
        <DepPaths Include="iFactr.UI/Distribution/%(_DepPaths.Identity).dll"/>
      </ItemGroup>
      <GetFileVersion Files="@(DepPaths)" Formats="@(Formats)">
        <Output TaskParameter="Value" ItemName="Dependencies" />
      </GetFileVersion>
      <XmlUpdate XPath="//dependency[@id=&quot;%(Dependencies.Name)&quot;]/@version"
            XmlFileName="$(Framework)/iFactr.Droid.nuspec"
            Value="%(Version)"/>
      <GetFileVersion Files="Distribution/iFactr.Droid.dll">
        <Output TaskParameter="Value" ItemName="Assembly" />
      </GetFileVersion>
      <Exec WorkingDirectory="$(Framework)" Command="nuget pack -Symbols -Version %(Assembly.Version) iFactr.Droid.csproj -Prop Configuration=$(Configuration);SignAssembly=$(SignAssembly);AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile)" />
      <Exec WorkingDirectory="$(Framework)" Command="git checkout -- iFactr.Droid.nuspec" />
    </Target>

  <UsingTask TaskName="GetFileVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
        <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        <Formats ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
        <Value ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
        <Using Namespace="System.IO"/>
        <Using Namespace="System.Diagnostics"/>
        <Code Type="Fragment" Language="cs">
<![CDATA[  
      if (Files.Length > 0)  
      {  
        Value = new TaskItem[Files.Length];  
        for (int i = 0; i < Files.Length; i++)  
        {
          ITaskItem item = Files[i];
          var info = new FileInfo(item.GetMetadata("FullPath"));
          item = new TaskItem(item.ItemSpec);
          var version = info.Exists ? FileVersionInfo.GetVersionInfo(info.FullName).FileVersion : null;
          if (string.IsNullOrEmpty(version))
              continue;
          item.SetMetadata("Name", info.Name.Remove(info.Name.Length - info.Extension.Length));
          var format = Formats != null && Formats.Length > 0 ? Formats[Value.Count(v => v != null)].ItemSpec : null;
          while (!string.IsNullOrEmpty(format) && format.ToCharArray().Count(c => c =='.') <  version.ToCharArray().Count(c => c =='.'))
              version = version.Remove(version.LastIndexOf('.'));
          item.SetMetadata("Version", version);
          Value[i] = item;
        }
        Value = Value.Where(v => v != null).ToArray();
      }
]]>
        </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="XmlRead" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
        <XPath ParameterType="System.String" Required="true" />
        <XmlFileName ParameterType="System.String" Required="true" />
        <Value ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
        <Reference Include="System.Xml" />
        <Using Namespace="System.Xml"/>
        <Code Type="Fragment" Language="cs"><![CDATA[
	var doc = new XmlDocument();
	doc.Load(XmlFileName);
	var nsmgr = new XmlNamespaceManager(doc.NameTable);
	foreach (XmlAttribute pair in doc.DocumentElement.Attributes)
		if (pair.Name.StartsWith("xmlns:")) nsmgr.AddNamespace(pair.Name.Substring(6), pair.Value);
	var nodes = doc.DocumentElement.SelectNodes(XPath, nsmgr);
	Value = new TaskItem[nodes.Count];
	for (int i = 0; i < nodes.Count; i++)
		if (nodes[i] is XmlAttribute) Value[i] = new TaskItem(nodes[i].Value);
		else Value[i] = new TaskItem(nodes[i].InnerXml);
]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="XmlUpdate" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
        <XPath ParameterType="System.String" Required="true" />
        <XmlFileName ParameterType="System.String" Required="true" />
        <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
        <Reference Include="System.Xml" />
        <Using Namespace="System.Xml"/>
        <Code Type="Fragment" Language="cs"><![CDATA[
	var doc = new XmlDocument();
	doc.Load(XmlFileName);
	var nsmgr = new XmlNamespaceManager(doc.NameTable);
	foreach (XmlAttribute pair in doc.DocumentElement.Attributes)
		if (pair.Name.StartsWith("xmlns:")) nsmgr.AddNamespace(pair.Name.Substring(6), pair.Value);
	var node = doc.DocumentElement.SelectSingleNode(XPath, nsmgr);
	if (node is XmlAttribute) node.Value = Value;
	else node.InnerXml = Value;
	doc.Save(XmlFileName);
]]></Code>
    </Task>
  </UsingTask>
</Project>
